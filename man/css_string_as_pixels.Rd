% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/numeric-values.R
\name{css_string_as_pixels}
\alias{css_string_as_pixels}
\title{Naively convert a CSS string value (e.g. \code{"1em"}) into the number of pixels
this represents.}
\usage{
css_string_as_pixels(x, percentage_as_fraction = TRUE, ...)
}
\arguments{
\item{x}{Character string of a CSS value e.g. "12", "12px", "3em", "47\%"}

\item{percentage_as_fraction}{Default: TRUE means that if a value is given as
"50%", then the returned numeric value is "0.5".  If this argument is
\code{FALSE}, then a numeric value of 50 would be returned.}

\item{...}{other arguments passed to \code{css_length_as_pixels()}}
}
\value{
a numeric value for this length in pixels as best we can with limited knowledge
}
\description{
This function is a small wrapper around \code{css_string_as_length()} and
\code{css_length_as_pixels()}.
}
\details{
This function does some naive conversions, and assumes the display is
96dpi.

For more control on the final result, the user is encouraged to use
\code{css_string_as_length()} and hand-roll their own unit conversion to
their display units.  This can be tricky as some units rely on rendering
viewport sizes and font-size on the root node - thus i'll leave that for
the user to handle.
}
